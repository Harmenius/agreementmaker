Swoop allows you to select reasoners, and this affects the class tree
shown.  The default is "No Reasoner", which will only show explict
subclass links. Both the RDFS-Like and Pellet reasoners display the
proper roots. (Pellet also shows that Safari is unsatisfiable)
====================================================================================================
> Dave Reynolds wrote:
>
>>I would say that Protege is right and Swoop is wrong in this case.
>>
>>For example looking at BackpackersDestination then it is defined as
>>being a Destination which also meets restrictions on hasAccomodation and
>>hasActivity. So it is a subClassOf Destination and you wouldn't normally
>>regard it as a root class.
>
>
> Swoop allows you to select reasoners, and this affects the class tree
> shown.  The default is "No Reasoner", which will only show explict
> subclass links.  Both the RDFS-Like and Pellet reasoners display the
> proper roots. (Pellet also shows that Safari is unsatisfiable)

That would indeed explain it. You get similar behaviour with Jena - the
root classes code will return different results depending on inference level.
====================================================================================================
Protege
applies some trivial inferencing.  For example if you have

A equivalentClass (intersection of B and Restriction)

then Protege would "infer" that A is also a subclass of B.  So neither
Protege nor SWOOP are "correct" - it's just a matter of how we define
inferencing at edit-time.  As far as I can tell the Protege solution has
proven to be helpful and most cases, although it is not a "clean"
approach as implemented by SWOOP, where asserted and inferred statements
are clearly separated.

Holger
====================================================================================================
NO UNION, Intersection, complement, restriction
====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================

====================================================================================================
