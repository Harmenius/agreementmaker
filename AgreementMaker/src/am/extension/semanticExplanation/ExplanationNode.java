package am.extension.semanticExplanation;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import edu.uci.ics.jung.graph.DelegateTree;

public class ExplanationNode {
	double val;
	List<ExplanationNode> children;
	CombinationCriteria criteria;
	String description;
	public DelegateTree<String,String> tree= new DelegateTree<String, String>();
	static int edge=1;

	
	public ExplanationNode(double val, List<ExplanationNode> children,
			CombinationCriteria criteria, String description) {
		this.val = val;
		this.children = children;
		this.criteria = criteria;
		this.description = description;
		tree = new DelegateTree<String, String>();
	}


	public ExplanationNode() {
		this.val = 0;
		this.children = new ArrayList<ExplanationNode>();
		this.criteria = CombinationCriteria.NOTDEFINED;
		this.description = "";
		tree = new DelegateTree<String, String>();
	}
	
	public ExplanationNode(String description) {
		this.val = 0;
		this.children = new ArrayList<ExplanationNode>();
		this.criteria = CombinationCriteria.NOTDEFINED;
		this.description = description;
		tree = new DelegateTree<String, String>();
	}

	public void addChild(ExplanationNode node){
		this.children.add(node);
	}
	

	public double getVal() {
		return val;
	}


	public void setVal(double val) {
		this.val = val;
	}


	public List<ExplanationNode> getChildren() {
		return children;
	}


	public void setChildren(List<ExplanationNode> children) {
		this.children = children;
	}


	public CombinationCriteria getCriteria() {
		return criteria;
	}


	public void setCriteria(CombinationCriteria criteria) {
		this.criteria = criteria;
	}


	public String getDescription() {
		return description;
	}


	public void setDescription(String description) {
		this.description = description;
	}
	
	public void describeNode(){
		System.out.println("A similarity value of "+this.val+" was generated by Algorithm: "+this.description);
	}

	public void describeExplanation(){
		if(this.children.size() ==0){
			this.describeNode();
			return;
		}
		for(ExplanationNode node: this.children){
			node.describeExplanation();
			
		}
		this.describeNode();
	}
	
	public void describeTopDown() {
		Queue<ExplanationNode> explnQ = new LinkedList<ExplanationNode>();
		explnQ.add(this);
		tree.addVertex(this.description+":"+this.val);
		addChildren(this, tree);
/*		while(explnQ.size()>0) {
			ExplanationNode node = explnQ.remove();
			node.describeNode();
			// Graph<V, E> where V is the type of the vertices
			// and E is the type of the edges
			// Add some vertices. From above we defined these to be type Integer.
			// Add some edges. From above we defined these to be of type String
			// Note that the default is for undirected edges.
			tree.addVertex(node.description+":"+node.val);
			if(node.children.size()>0) {
				for(ExplanationNode child: node.children) {
					tree.addChild("edge "+edge, node.description+":"+node.val, child.description+":"+node.val);
					explnQ.add(child);
					edge++;
				}
			}

		}*/
		System.out.println("The graph g = " + tree.toString());
	}
	
	private static void addChildren(ExplanationNode node, DelegateTree<String, String> tree) {
	    for (int i = 0; i < node.getChildren().size(); i++) {
	        tree.addChild("edge "+edge, node.description+":"+node.val, node.getChildren().get(i).description+":"+node.getChildren().get(i).val);
	        edge++;
	        addChildren(node.getChildren().get(i), tree);
	    }
	    edge++;
	}
	
}
